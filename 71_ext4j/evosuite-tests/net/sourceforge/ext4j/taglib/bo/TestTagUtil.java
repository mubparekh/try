/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.ext4j.taglib.bo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;
import net.sourceforge.ext4j.taglib.bo.TagUtil;
import org.junit.BeforeClass;
import org.springframework.core.io.ClassRelativeResourceLoader;
import org.springframework.core.io.ResourceLoader;
import org.springframework.mock.web.MockPageContext;
import org.springframework.mock.web.MockServletContext;

@RunWith(EvoSuiteRunner.class)
public class TestTagUtil {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TagUtil tagUtil0 = new TagUtil();
      assertNotNull(tagUtil0);
  }

  @Test
  public void test1()  throws Throwable  {
      Class<?> class0 = TagUtil.class;
      ClassRelativeResourceLoader classRelativeResourceLoader0 = new ClassRelativeResourceLoader(class0);
      MockServletContext mockServletContext0 = new MockServletContext((ResourceLoader) classRelativeResourceLoader0);
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) mockServletContext0, (HttpServletRequest) null, (HttpServletResponse) null);
      try {
        TagUtil.resolveUrl("    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", "    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", (PageContext) mockPageContext0);
        fail("Expecting exception: JspTagException");
      } catch(JspTagException e) {
        /*
         * Invalid context
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      boolean boolean0 = TagUtil.isAbsoluteUrl((String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) null);
      String string0 = TagUtil.rewriteURL("8$4<j)", (PageContext) mockPageContext0);
      assertEquals("8$4<j)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      MockPageContext mockPageContext0 = new MockPageContext();
      String string0 = TagUtil.rewriteURL("o:", (PageContext) mockPageContext0);
      assertEquals("o:", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = TagUtil.resolveUrl("    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", "    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", (PageContext) null);
      assertEquals("    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      MockPageContext mockPageContext0 = new MockPageContext();
      String string0 = TagUtil.rewriteURL("/*nC:^", (PageContext) mockPageContext0);
      assertNotNull(string0);
      assertEquals("/*nC:^", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      MockPageContext mockPageContext0 = new MockPageContext();
      String string0 = TagUtil.resolveUrl("/    .warn  { font-weight: bold; color: #FF6600;} \r\n", "/*nC:^", (PageContext) mockPageContext0);
      assertNotNull(string0);
      assertEquals("/*nC:^/    .warn  { font-weight: bold; color: #FF6600;} \r\n", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      MockPageContext mockPageContext0 = new MockPageContext();
      try {
        TagUtil.resolveUrl("\"gi>1Q)", "/Encoder hasunot been set. Cannot invoke its init method.", (PageContext) mockPageContext0);
        fail("Expecting exception: JspTagException");
      } catch(JspTagException e) {
        /*
         * Invalid context
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      String string0 = TagUtil.rewriteURL("    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", (PageContext) null);
      assertNotNull(string0);
      assertEquals("    td { padding-right: 1ex; padding-left: 1ex; border-right: 2px solid #AAA; }\r\n", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.aggregateParams(";}<^tngUaC");
      // Undeclared exception!
      try {
        tagUtil_ParamManager0.addParameter("o:", "4{,H");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.addParameter((String) null, (String) null);
  }

  @Test
  public void test12()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.addParameter("$B#o", (String) null);
  }

  @Test
  public void test13()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.aggregateParams("2");
      // Undeclared exception!
      try {
        tagUtil_ParamManager0.aggregateParams("2");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.addParameter("", "");
      tagUtil_ParamManager0.addParameter("", "");
      String string0 = tagUtil_ParamManager0.aggregateParams("8$4<j)");
      assertEquals("8$4<j)?=&=", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      TagUtil.ParamManager tagUtil_ParamManager0 = new TagUtil.ParamManager();
      tagUtil_ParamManager0.addParameter("Encoder has not been bet. Cannot invoke its init methd.", "Encoder has not been bet. Cannot invoke its init methd.");
      String string0 = tagUtil_ParamManager0.aggregateParams("-]kS-qsC &n?$!VbL+I");
      assertNotNull(string0);
      assertEquals("-]kS-qsC &n?Encoder has not been bet. Cannot invoke its init methd.=Encoder has not been bet. Cannot invoke its init methd.&$!VbL+I", string0);
  }
}
